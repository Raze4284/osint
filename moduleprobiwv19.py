from telethon import events
import asyncio
from .. import loader  # –ò–º–ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –º–æ–¥—É–ª–µ–π Hikka

class EyeOfGodModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ì–ª–∞–∑ –ë–æ–≥–∞"""
    strings = {"name": "EyeOfGodSearch"}
    
    # –ò–º—è –±–æ—Ç–∞ –ì–ª–∞–∑ –ë–æ–≥–∞
    BOT_USERNAME = "FS00CIETY_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞ –±–µ–∑ @
    
    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = client
        self.db = db
        # –ü–æ–ª—É—á–∞–µ–º entity –±–æ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        try:
            self.bot_entity = await client.get_entity(f"@{self.BOT_USERNAME}")
        except Exception as e:
            self.bot_entity = None
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –±–æ—Ç–∞: {e}")
    
    async def send_cmd_to_bot(self, query_value):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç"""
        if not self.bot_entity:
            try:
                self.bot_entity = await self.client.get_entity(f"@{self.BOT_USERNAME}")
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–æ—Ç–∞ @{self.BOT_USERNAME}"
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
            await self.client.send_message(self.bot_entity, query_value)
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
            start_time = asyncio.get_event_loop().time()
            timeout = 60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            while (asyncio.get_event_loop().time() - start_time) < timeout:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = await self.client.get_messages(
                    self.bot_entity,
                    limit=3,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                )
                
                for msg in messages:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã)
                    if msg.date.timestamp() > start_time - 5:  # 5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∞—Å–∞
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —ç—Ö–æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã
                        if not msg.out and query_value not in msg.text:
                            return msg.text
                
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(2)
            
            return "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞"
        
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –±–æ—Ç–æ–º: {str(e)}"
    
    async def process_command(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        args = message.raw_text.split(" ", 1)
        
        if len(args) < 2:
            await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞!\n–ü—Ä–∏–º–µ—Ä: .phone –Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
        
        query_value = args[1]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = await message.reply(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –ì–ª–∞–∑ –ë–æ–≥–∞ ({query_value})...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = await self.send_cmd_to_bot(query_value)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            safe_result = str(response).replace('<', '&lt;').replace('>', '&gt;')
            
            try:
                await status_message.edit(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –±–æ—Ç–∞ –ì–ª–∞–∑ –ë–æ–≥–∞:\n\n{safe_result}", parse_mode=None)
            except Exception as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                await status_message.delete()
                await message.reply(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –±–æ—Ç–∞ –ì–ª–∞–∑ –ë–æ–≥–∞:\n\n{safe_result}", parse_mode=None)
        else:
            await status_message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞.")
    
    async def phone_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        await self.process_command(message)
    
    async def name_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –§–ò–û"""
        await self.process_command(message)
    
    async def car_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        await self.process_command(message)
    
    async def address_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É"""
        await self.process_command(message)
    
    async def ip_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ IP-–∞–¥—Ä–µ—Å—É"""
        await self.process_command(message)
    
    async def vk_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ VK"""
        await self.process_command(message)
    
    async def inst_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ Instagram"""
        await self.process_command(message)
    
    async def tg_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ Telegram"""
        await self.process_command(message)
    
    async def email_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ Email"""
        await self.process_command(message)
