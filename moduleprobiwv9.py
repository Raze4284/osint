from telethon import events
import requests
from .. import loader  # –ò–º–ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –º–æ–¥—É–ª–µ–π Hikka

TOKEN = "7352788141:AAFwTI8fhYV6WXLSPEE1dB5PYEnXlyb6auE"
API_URL = f"https://api.telegram.org/bot{TOKEN}/sendMessage"  # Telegram Bot API URL

class SearchModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Bot API"""
    strings = {"name": "SearchModule"}

    async def send_command(self, query_value, command):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π chat_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à user_id –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã
    chat_id = "498179796"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
    
    params = {
        "chat_id": chat_id,
        "text": f"/{command} {query_value}"
    }
    try:
        response = requests.post(API_URL, params=params)
        response.raise_for_status()
        data = response.json()
        return data.get("result", {}).get("text", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    async def process_command(self, message, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        args = message.raw_text.split(" ", 1)
        if len(args) < 2:
            await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞!")
            return
        query_value = args[1]
        status_message = await message.reply("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
        result = await self.send_command(query_value, command)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        safe_result = str(result).replace('<', '&lt;').replace('>', '&gt;')
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode=None –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await status_message.edit(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n{safe_result}", parse_mode=None)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.delete()
            await message.reply(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n{safe_result}", parse_mode=None)

    async def osphone_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        await self.process_command(message, "osphone")

    async def ospass_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –§–ò–û"""
        await self.process_command(message, "ospass")

    async def oscar_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        await self.process_command(message, "oscar")

    async def osadress_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É"""
        await self.process_command(message, "osadress")

    async def osip_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ IP-–∞–¥—Ä–µ—Å—É"""
        await self.process_command(message, "osip")