from telethon import events
import requests

from .. import loader  # –ò–º–ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –º–æ–¥—É–ª–µ–π Hikka

TOKEN = "7352788141:AAFwTI8fhYV6WXLSPEE1dB5PYEnXlyb6auE"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–∞–≤—ã—á–∫–∞—Ö!)
API_URL = f"https://api.telegram.org/bot{TOKEN}/sendMessage"  # Telegram Bot API URL

class SearchModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Bot API"""
    strings = {"name": "SearchModule"}

    async def send_command(self, message, command, query_value):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç"""
        params = {
            "chat_id": message.chat_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
            "text": f"/{command} {query_value}"
        }
        try:
            response = requests.post(API_URL, params=params)
            response.raise_for_status()
            data = response.json()
            return data.get("result", {}).get("text", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        except requests.exceptions.RequestException as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    async def osphone_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        args = message.raw_text.split(" ", 1)
        if len(args) < 2:
            await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
            return
        result = await self.send_command(message, "osphone", args[1])
        await message.reply(f"üìû –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n{result}")

    async def ospass_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –§–ò–û"""
        args = message.raw_text.split(" ", 1)
        if len(args) < 2:
            await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –§–ò–û!")
            return
        result = await self.send_command(message, "ospass", args[1])
        await message.reply(f"üÜî –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n{result}")

    async def oscar_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        args = message.raw_text.split(" ", 1)
        if len(args) < 2:
            await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")
            return
        result = await self.send_command(message, "oscar", args[1])
        await message.reply(f"üöó –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n{result}")

    async def osadress_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É"""
        args = message.raw_text.split(" ", 1)
        if len(args) < 2:
            await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å!")
            return
        result = await self.send_command(message, "osadress", args[1])
        await message.reply(f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n{result}")

    async def osip_cmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–æ IP-–∞–¥—Ä–µ—Å—É"""
        args = message.raw_text.split(" ", 1)
        if len(args) < 2:
            await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å!")
            return
        result = await self.send_command(message, "osip", args[1])
        await message.reply(f"üåç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n{result}")
